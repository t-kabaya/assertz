・avaの用にテスト関数の行数をテスト失敗時に表示

・個別のファイル名ごとにテストを実行出来るようにする。
・テストが失敗してもエラーが帰らないため、huskyによるpre commitがうまく動作しない。
・ターミナルをクリックすると、テストへ移動出来るように。
・エラーが発生した時のメッセージを考える。
・fs.watchは、linuxで動かない機能があるので、node-watchなど、サードパーティライブラリで、書き換える。
・テストをもっと書く
・before, afterも、作っておきたい。
・async testでは、即時関数を使用している。この時のボイラープレートを無くしたいな。
・notEqualというマッチャーを一つだけ増やす
・line numberを取得する（getLineNumber.jsを使って）
・e2eテストってどうしよう。
・npxで、githubの特定のブランチを実行する。

## 今やること
snapShot.tsの単体テストを書く
maybeUpdateSnapShotの単体テストをsinonを使って書く
snapShotテストで生成されたファイルが読みづらいな。
createReporterを完成させて、アップデートが必要なスナップショットをかく。
snapShotの中で、updateが必要なものを列挙する。

と言うより仕様を先に決めておく必要がある。

# snapShotテスト仕様

# syntax
snapShot(tree, 'snapshot test')
スナップショットが使われているファイルのコピーを作成し、その中身を書き込む。
someTest.js
snapshot/someTest.snap
というように。

testNameがない時に、どう「変化した」ことを検知するんだろう。
ファイル内に、以前と同じ、jsonがあるか探す？
もし、たまたま、同じjsonがあった場合は、テストの失敗を成功と捉えてしまう恐れがある。
jestは、testNameで、snapShotを識別していたようだ。

testを走らせる。
(新しいスナップショットは、テストを走らせた段階で書き込む。)
下
スナップショットが間違っていることがみつかる。

assertz updateSnapShotを走らせると、
snapShotがアップデートされる。
